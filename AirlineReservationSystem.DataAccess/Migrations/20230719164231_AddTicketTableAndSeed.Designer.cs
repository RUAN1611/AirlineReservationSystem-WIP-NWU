// <auto-generated />
using System;
using AirlineReservationSystem.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirlineReservationSystem.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230719164231_AddTicketTableAndSeed")]
    partial class AddTicketTableAndSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirlineReservationSystem.Models.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<double>("FuelEconomy")
                        .HasColumnType("float");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxCruiseSpeed")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNoOfSeats")
                        .HasColumnType("int");

                    b.Property<double>("TravelRange")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateRegistered = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FuelEconomy = 2.5,
                            Manufacturer = "Boeing",
                            MaxCruiseSpeed = 1480.0,
                            Name = "Boeing 747",
                            OriginalPrice = 10000000m,
                            SerialNumber = "747-001",
                            TotalNoOfSeats = 400,
                            TravelRange = 21000.0
                        },
                        new
                        {
                            Id = 2,
                            DateRegistered = new DateTime(2018, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FuelEconomy = 2.2999999999999998,
                            Manufacturer = "Airbus",
                            MaxCruiseSpeed = 1520.0,
                            Name = "Airbus A380",
                            OriginalPrice = 12000000m,
                            SerialNumber = "A380-002",
                            TotalNoOfSeats = 525,
                            TravelRange = 24000.0
                        },
                        new
                        {
                            Id = 3,
                            DateRegistered = new DateTime(2015, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FuelEconomy = 1.6000000000000001,
                            Manufacturer = "Bombardier",
                            MaxCruiseSpeed = 1400.0,
                            Name = "Bombardier CRJ200",
                            OriginalPrice = 2000000m,
                            SerialNumber = "CRJ200-003",
                            TotalNoOfSeats = 50,
                            TravelRange = 4800.0
                        },
                        new
                        {
                            Id = 4,
                            DateRegistered = new DateTime(2017, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FuelEconomy = 4.0,
                            Manufacturer = "Cessna",
                            MaxCruiseSpeed = 550.0,
                            Name = "Cessna 172 Skyhawk",
                            OriginalPrice = 300000m,
                            SerialNumber = "C172-004",
                            TotalNoOfSeats = 4,
                            TravelRange = 2400.0
                        },
                        new
                        {
                            Id = 5,
                            DateRegistered = new DateTime(2019, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FuelEconomy = 2.6000000000000001,
                            Manufacturer = "Pilatus",
                            MaxCruiseSpeed = 900.0,
                            Name = "Pilatus PC-12",
                            OriginalPrice = 4500000m,
                            SerialNumber = "PC12-005",
                            TotalNoOfSeats = 9,
                            TravelRange = 3840.0
                        },
                        new
                        {
                            Id = 6,
                            DateRegistered = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FuelEconomy = 1.6000000000000001,
                            Manufacturer = "Gulfstream",
                            MaxCruiseSpeed = 1480.0,
                            Name = "Gulfstream G650",
                            OriginalPrice = 60000000m,
                            SerialNumber = "G650-006",
                            TotalNoOfSeats = 18,
                            TravelRange = 20000.0
                        });
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Johannesburg",
                            Name = "OR Tambo International Airport",
                            Province = "Gauteng"
                        },
                        new
                        {
                            Id = 2,
                            City = "Cape Town",
                            Name = "Cape Town International Airport",
                            Province = "Western Cape"
                        },
                        new
                        {
                            Id = 3,
                            City = "Durban",
                            Name = "King Shaka International Airport",
                            Province = "KwaZulu-Natal"
                        },
                        new
                        {
                            Id = 4,
                            City = "Johannesburg",
                            Name = "Lanseria International Airport",
                            Province = "Gauteng"
                        },
                        new
                        {
                            Id = 5,
                            City = "Port Elizabeth",
                            Name = "Port Elizabeth International Airport",
                            Province = "Eastern Cape"
                        },
                        new
                        {
                            Id = 6,
                            City = "Nelspruit",
                            Name = "Kruger Mpumalanga International Airport",
                            Province = "Mpumalanga"
                        },
                        new
                        {
                            Id = 7,
                            City = "East London",
                            Name = "East London Airport",
                            Province = "Eastern Cape"
                        },
                        new
                        {
                            Id = 8,
                            City = "Bloemfontein",
                            Name = "Bram Fischer International Airport",
                            Province = "Free State"
                        },
                        new
                        {
                            Id = 9,
                            City = "George",
                            Name = "George Airport",
                            Province = "Western Cape"
                        },
                        new
                        {
                            Id = 10,
                            City = "Kimberley",
                            Name = "Kimberley Airport",
                            Province = "Northern Cape"
                        },
                        new
                        {
                            Id = 11,
                            City = "Upington",
                            Name = "Upington International Airport",
                            Province = "Northern Cape"
                        },
                        new
                        {
                            Id = 12,
                            City = "Pilanesberg",
                            Name = "Pilanesberg International Airport",
                            Province = "North West"
                        },
                        new
                        {
                            Id = 13,
                            City = "Margate",
                            Name = "Margate Airport",
                            Province = "KwaZulu-Natal"
                        });
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Bethal",
                            DateOfBirth = new DateTime(2000, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ruan.nagel1611@gmail.com",
                            FirstName = "Ruan",
                            Gender = "Male",
                            IDNumber = "0001255034512",
                            LastName = "Meyer",
                            PhoneNumber = "0818264321",
                            StreetAddress = "17 Kalie Brits"
                        },
                        new
                        {
                            Id = 2,
                            City = "Durban",
                            DateOfBirth = new DateTime(1995, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "z.mthembu@gmail.com",
                            FirstName = "Zinhle",
                            Gender = "Female",
                            IDNumber = "9506120012087",
                            LastName = "Mthembu",
                            PhoneNumber = "0712345678",
                            StreetAddress = "23 Beach Road"
                        },
                        new
                        {
                            Id = 3,
                            City = "Johannesburg",
                            DateOfBirth = new DateTime(1987, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tmokwena@gmail.com",
                            FirstName = "Thabo",
                            Gender = "Male",
                            IDNumber = "8703055034087",
                            LastName = "Mokwena",
                            PhoneNumber = "0823456789",
                            StreetAddress = "14 Main Street"
                        },
                        new
                        {
                            Id = 4,
                            City = "Pietermaritzburg",
                            DateOfBirth = new DateTime(1998, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nmkhize22@hotmail.com",
                            FirstName = "Nomthandazo",
                            Gender = "Female",
                            IDNumber = "9811220067088",
                            LastName = "Mkhize",
                            PhoneNumber = "0734567890",
                            StreetAddress = "5 Victoria Road"
                        },
                        new
                        {
                            Id = 5,
                            City = "Pretoria",
                            DateOfBirth = new DateTime(1980, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mmolefe@gmail.com",
                            FirstName = "Moses",
                            Gender = "Male",
                            IDNumber = "8009035054080",
                            LastName = "Molefe",
                            PhoneNumber = "0834567891",
                            StreetAddress = "20 Church Street"
                        },
                        new
                        {
                            Id = 6,
                            City = "Nelspruit",
                            DateOfBirth = new DateTime(1991, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lnkosi@yahoo.com",
                            FirstName = "Lindiwe",
                            Gender = "Female",
                            IDNumber = "9107160014081",
                            LastName = "Nkosi",
                            PhoneNumber = "0713456789",
                            StreetAddress = "10 Riverside Drive"
                        },
                        new
                        {
                            Id = 7,
                            City = "Soweto",
                            DateOfBirth = new DateTime(1996, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sngwenya@gmail.com",
                            FirstName = "Sipho",
                            Gender = "Male",
                            IDNumber = "9602280026085",
                            LastName = "Ngwenya",
                            PhoneNumber = "0834567892",
                            StreetAddress = "15 Vilakazi Street"
                        },
                        new
                        {
                            Id = 8,
                            City = "Cape Town",
                            DateOfBirth = new DateTime(1989, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ndlamini@hotmail.com",
                            FirstName = "Nompumelelo",
                            Gender = "Female",
                            IDNumber = "8912070030084",
                            LastName = "Dlamini",
                            PhoneNumber = "0723456789",
                            StreetAddress = "7 Long Street"
                        },
                        new
                        {
                            Id = 9,
                            City = "Bloemfontein",
                            DateOfBirth = new DateTime(1993, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tmashigo@gmail.com",
                            FirstName = "Thabiso",
                            Gender = "Male",
                            IDNumber = "9304195031082",
                            LastName = "Mashigo",
                            PhoneNumber = "0812345678",
                            StreetAddress = "12 President Brand Street"
                        },
                        new
                        {
                            Id = 10,
                            City = "Rustenburg",
                            DateOfBirth = new DateTime(1986, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lmoloi@yahoo.com",
                            FirstName = "Lerato",
                            Gender = "Female",
                            IDNumber = "8608090013085",
                            LastName = "Moloi",
                            PhoneNumber = "0734567892",
                            StreetAddress = "9 Berg Street"
                        },
                        new
                        {
                            Id = 11,
                            City = "Polokwane",
                            DateOfBirth = new DateTime(1992, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bmabasa@hotmail.com",
                            FirstName = "Bongani",
                            Gender = "Male",
                            IDNumber = "9205315033084",
                            LastName = "Mabasa",
                            PhoneNumber = "0823456781",
                            StreetAddress = "6 Church Street"
                        },
                        new
                        {
                            Id = 12,
                            City = "East London",
                            DateOfBirth = new DateTime(1997, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nmbatha@gmail.com",
                            FirstName = "Nokubonga",
                            Gender = "Female",
                            IDNumber = "9702150014086",
                            LastName = "Mbatha",
                            PhoneNumber = "0712345679",
                            StreetAddress = "18 Oxford Road"
                        },
                        new
                        {
                            Id = 13,
                            City = "Pretoria",
                            DateOfBirth = new DateTime(1988, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "liezelvz@gmail.com",
                            FirstName = "Liezel",
                            Gender = "Female",
                            IDNumber = "8810110015088",
                            LastName = "Van Zyl",
                            PhoneNumber = "0823456781",
                            StreetAddress = "7 Van Der Walt Street"
                        },
                        new
                        {
                            Id = 14,
                            City = "Johannesburg",
                            DateOfBirth = new DateTime(1985, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johankruger@yahoo.com",
                            FirstName = "Johan",
                            Gender = "Male",
                            IDNumber = "8504275022087",
                            LastName = "Kruger",
                            PhoneNumber = "0834567892",
                            StreetAddress = "12 Kruger Street"
                        },
                        new
                        {
                            Id = 15,
                            City = "Cape Town",
                            DateOfBirth = new DateTime(1990, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elizebotha@gmail.com",
                            FirstName = "Elize",
                            Gender = "Female",
                            IDNumber = "9007030010085",
                            LastName = "Botha",
                            PhoneNumber = "0712345678",
                            StreetAddress = "24 Main Road"
                        });
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Cape Town",
                            DateOfBirth = new DateTime(1998, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vodendaal@gmail.com",
                            FirstName = "Valushia",
                            Gender = "Female",
                            IDNumber = "9805031010085",
                            LastName = "Odendaal",
                            PhoneNumber = "0612446674",
                            StreetAddress = "52 Main Road"
                        },
                        new
                        {
                            Id = 2,
                            City = "Johannesburg",
                            DateOfBirth = new DateTime(1992, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tmoloi@example.com",
                            FirstName = "Thabo",
                            Gender = "Male",
                            IDNumber = "9208155678901",
                            LastName = "Moloi",
                            PhoneNumber = "0823456789",
                            StreetAddress = "123 Oak Street"
                        },
                        new
                        {
                            Id = 3,
                            City = "Durban",
                            DateOfBirth = new DateTime(1985, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zngwenya@example.com",
                            FirstName = "Zanele",
                            Gender = "Female",
                            IDNumber = "8511257890123",
                            LastName = "Ngwenya",
                            PhoneNumber = "0845678901",
                            StreetAddress = "456 Beach Road"
                        },
                        new
                        {
                            Id = 4,
                            City = "Pretoria",
                            DateOfBirth = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sipho@example.com",
                            FirstName = "Sipho",
                            Gender = "Male",
                            IDNumber = "9203103456789",
                            LastName = "Mbatha",
                            PhoneNumber = "0712345678",
                            StreetAddress = "789 Pine Avenue"
                        },
                        new
                        {
                            Id = 5,
                            City = "Bloemfontein",
                            DateOfBirth = new DateTime(1988, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lmodise@example.com",
                            FirstName = "Lerato",
                            Gender = "Female",
                            IDNumber = "8807216789012",
                            LastName = "Modise",
                            PhoneNumber = "0834567890",
                            StreetAddress = "321 Main Street"
                        },
                        new
                        {
                            Id = 6,
                            City = "Port Elizabeth",
                            DateOfBirth = new DateTime(1995, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bmthembu@example.com",
                            FirstName = "Bongani",
                            Gender = "Male",
                            IDNumber = "9512054567890",
                            LastName = "Mthembu",
                            PhoneNumber = "0723456789",
                            StreetAddress = "987 Beach Road"
                        });
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAirportId")
                        .HasColumnType("int");

                    b.Property<int>("OriginAirportId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("OriginAirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AircraftId = 2,
                            ArrivalTime = new DateTime(2023, 7, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2023, 7, 23, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 2,
                            OriginAirportId = 3,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 2,
                            AircraftId = 4,
                            ArrivalTime = new DateTime(2023, 7, 24, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2023, 7, 24, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 10,
                            OriginAirportId = 6,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 3,
                            AircraftId = 1,
                            ArrivalTime = new DateTime(2023, 7, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2023, 7, 25, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 7,
                            OriginAirportId = 5,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 4,
                            AircraftId = 6,
                            ArrivalTime = new DateTime(2023, 7, 26, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2023, 7, 26, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 12,
                            OriginAirportId = 9,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 5,
                            AircraftId = 3,
                            ArrivalTime = new DateTime(2023, 7, 27, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2023, 7, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationAirportId = 13,
                            OriginAirportId = 4,
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.FlightEmployee", b =>
                {
                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlightId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("FlightEmployees");

                    b.HasData(
                        new
                        {
                            FlightId = 1,
                            EmployeeId = 1,
                            JobRole = "Pilot"
                        },
                        new
                        {
                            FlightId = 1,
                            EmployeeId = 3,
                            JobRole = "Co-Pilot"
                        },
                        new
                        {
                            FlightId = 1,
                            EmployeeId = 2,
                            JobRole = "Assistant"
                        },
                        new
                        {
                            FlightId = 1,
                            EmployeeId = 4,
                            JobRole = "Loader"
                        },
                        new
                        {
                            FlightId = 2,
                            EmployeeId = 1,
                            JobRole = "Pilot"
                        },
                        new
                        {
                            FlightId = 2,
                            EmployeeId = 3,
                            JobRole = "Co-Pilot"
                        },
                        new
                        {
                            FlightId = 2,
                            EmployeeId = 2,
                            JobRole = "Assistant"
                        },
                        new
                        {
                            FlightId = 2,
                            EmployeeId = 4,
                            JobRole = "Loader"
                        });
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlightId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 2,
                            DateCreated = new DateTime(2023, 7, 19, 19, 42, 31, 716, DateTimeKind.Local).AddTicks(7996),
                            FlightId = 3,
                            Status = "Reserved"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 3,
                            DateCreated = new DateTime(2023, 7, 19, 19, 42, 31, 716, DateTimeKind.Local).AddTicks(8041),
                            FlightId = 1,
                            Status = "Reserved"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 4,
                            DateCreated = new DateTime(2023, 7, 19, 19, 42, 31, 716, DateTimeKind.Local).AddTicks(8043),
                            FlightId = 2,
                            Status = "Reserved"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 5,
                            DateCreated = new DateTime(2023, 7, 19, 19, 42, 31, 716, DateTimeKind.Local).AddTicks(8045),
                            FlightId = 4,
                            Status = "Reserved"
                        });
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdult")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Ticketes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdult = true,
                            Price = 450m,
                            ReservationId = 1,
                            SeatNo = 14
                        },
                        new
                        {
                            Id = 2,
                            IsAdult = true,
                            Price = 350m,
                            ReservationId = 2,
                            SeatNo = 20
                        },
                        new
                        {
                            Id = 3,
                            IsAdult = true,
                            Price = 400m,
                            ReservationId = 3,
                            SeatNo = 25
                        },
                        new
                        {
                            Id = 4,
                            IsAdult = true,
                            Price = 375m,
                            ReservationId = 4,
                            SeatNo = 30
                        },
                        new
                        {
                            Id = 5,
                            IsAdult = false,
                            Price = 200m,
                            ReservationId = 1,
                            SeatNo = 35
                        },
                        new
                        {
                            Id = 6,
                            IsAdult = false,
                            Price = 225m,
                            ReservationId = 2,
                            SeatNo = 40
                        },
                        new
                        {
                            Id = 7,
                            IsAdult = false,
                            Price = 250m,
                            ReservationId = 3,
                            SeatNo = 45
                        },
                        new
                        {
                            Id = 8,
                            IsAdult = false,
                            Price = 275m,
                            ReservationId = 4,
                            SeatNo = 50
                        },
                        new
                        {
                            Id = 9,
                            IsAdult = false,
                            Price = 300m,
                            ReservationId = 1,
                            SeatNo = 55
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Flight", b =>
                {
                    b.HasOne("AirlineReservationSystem.Models.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineReservationSystem.Models.Airport", "DestinationAirport")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineReservationSystem.Models.Airport", "OriginAirport")
                        .WithMany()
                        .HasForeignKey("OriginAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("DestinationAirport");

                    b.Navigation("OriginAirport");
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.FlightEmployee", b =>
                {
                    b.HasOne("AirlineReservationSystem.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineReservationSystem.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Reservation", b =>
                {
                    b.HasOne("AirlineReservationSystem.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirlineReservationSystem.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AirlineReservationSystem.Models.Ticket", b =>
                {
                    b.HasOne("AirlineReservationSystem.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
